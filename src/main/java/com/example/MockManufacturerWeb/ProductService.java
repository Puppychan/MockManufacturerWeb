package com.example.MockManufacturerWeb;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.HashSet;import java.util.List;import java.util.Set;@Servicepublic class ProductService {    private ProductRepository productRepository;    @Autowired    public ProductService(ProductRepository productRepository) {        this.productRepository = productRepository;    }    public ResponseEntity<List<Product>> createProducts(List<Product> productList) {        try {            productRepository.saveAll(productList);            if (productList == null || productList.isEmpty())                return new ResponseEntity<>(null, HttpStatus.NO_CONTENT);            return new ResponseEntity<>(productList, HttpStatus.CREATED);        } catch (Exception e) {            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);        }    }    public ResponseEntity<Set<Product>> getProducts(String name) {        HashSet<Product> productSet = new HashSet<>();        try {            if (name == null) {                productSet.addAll(productRepository.findAll());                return new ResponseEntity<>(productSet, HttpStatus.ACCEPTED);            }            if (name != null)                productSet.addAll(productRepository.findByNameContaining(name));//            if (description != null)//                productSet.addAll(productRepository.findProductsByDescriptionContaining(description));            // if is empty            if (productSet.isEmpty())                return new ResponseEntity<>(null, HttpStatus.NO_CONTENT);            return new ResponseEntity<>(productSet, HttpStatus.ACCEPTED);        } catch (Exception e) {            return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);        }    }    public ResponseEntity<Product> updateProductById(Long id, Product newProduct) {        Product currentProduct = productRepository.findProductById(id);        if (currentProduct != null) {            currentProduct.setName(newProduct.getName());            productRepository.save(currentProduct);            return new ResponseEntity<>(currentProduct, HttpStatus.OK);        }        return new ResponseEntity<>(null, HttpStatus.INTERNAL_SERVER_ERROR);    }    public ResponseEntity<String> deleteProductById(Long id) {        try {            productRepository.deleteById(id);            return new ResponseEntity<>("delete successfully", HttpStatus.ACCEPTED);        } catch (Exception e) {            return new ResponseEntity<>("Cannot delete",  HttpStatus.NOT_FOUND);        }    }    // paging}